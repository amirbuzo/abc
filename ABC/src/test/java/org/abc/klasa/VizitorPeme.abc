klasa TreeVisitor{
  publike statike asgje kryesore(Tekst[] a){
		Sistem.printo(iri TV().start());
    }
}

klasa TV {

    publike numer start(){
	Tree3 root ;
	bul ntb ;
	numer nti ;
	Visitor v ;

	root = iri Tree3();
	ntb = root.Init(16);
	ntb = root.Print();
	Sistem.printo(100000000);
	ntb = root.Insert(8) ;
	ntb = root.Insert(24) ;
	ntb = root.Insert(4) ;
	ntb = root.Insert(12) ;
	ntb = root.Insert(20) ;
	ntb = root.Insert(28) ;
	ntb = root.Insert(14) ;
	ntb = root.Print();
	Sistem.printo(100000000);
	v = iri Visitor();
	Sistem.printo(50000000);
	nti = root.accept(v);
	Sistem.printo(100000000);
	Sistem.printo(root.Search(24));
	Sistem.printo(root.Search(12));
	Sistem.printo(root.Search(16));
	Sistem.printo(root.Search(50));
	Sistem.printo(root.Search(12));
	ntb = root.Delete(12);
	ntb = root.Print();
	Sistem.printo(root.Search(12));

	kthe 0 ;
    }

}


klasa Tree3{
    Tree3 left ;
    Tree3 right;
    numer key ;
    bul has_left ;
    bul has_right ;
    Tree3 my_null ;



    publike bul Init(numer v_key){
	key = v_key ;
	has_left = fals ;
	has_right = fals ;
	kthe vertete ;
    }

    publike bul SetRight(Tree3 rn){
	right = rn ;
	kthe vertete ;
    }

    publike bul SetLeft(Tree3 ln){
	left = ln ;
	kthe vertete ;
    }

    publike Tree3 GetRight(){
	kthe right ;
    }

    publike Tree3 GetLeft(){
	kthe left;
    }

    publike numer GetKey(){
	kthe key ;
    }

    publike bul SetKey(numer v_key){
	key = v_key ;
	kthe vertete ;
    }

    publike bul GetHas_Right(){
	kthe has_right ;
    }

    publike bul GetHas_Left(){
	kthe has_left ;
    }

    publike bul SetHas_Left(bul val){
	 has_left = val ;
	 kthe vertete ;
    }

    publike bul SetHas_Right(bul val){
	 has_right = val ;
	 kthe vertete ;
    }

    publike bul Compare(numer num1 , numer num2){
	bul ntb ;
	numer nti ;

	ntb = fals ;
	nti = num2 + 1 ;
	nese (num1 < num2) ntb = fals ;
	tjeter nese (!(num1 < nti)) ntb = fals ;
	tjeter ntb = vertete ;
	kthe ntb ;
    }

    publike bul Insert(numer v_key){
	Tree3 iri_node ;
	bul ntb ;
	Tree3 current_node ;
	bul cont ;
	numer key_aux ;

	iri_node = iri Tree3();
	ntb = iri_node.Init(v_key) ;
	current_node = ky ;
	cont = vertete ;
	ndersa (cont){
	    key_aux = current_node.GetKey();
	    nese (v_key < key_aux){
		nese (current_node.GetHas_Left())
		    current_node = current_node.GetLeft() ;
		tjeter {
		    cont = fals ;
		    ntb = current_node.SetHas_Left(vertete);
		    ntb = current_node.SetLeft(iri_node);
		}
	    }
	    tjeter{
		nese (current_node.GetHas_Right())
		    current_node = current_node.GetRight() ;
		tjeter {
		    cont = fals ;
		    ntb = current_node.SetHas_Right(vertete);
		    ntb = current_node.SetRight(iri_node);
		}
	    }
	}
	kthe vertete ;
    }

    publike bul Delete(numer v_key){
	Tree3 current_node ;
	Tree3 parent_node ;
	bul cont ;
	bul found ;
	bul ntb ;
	bul is_root ;
	numer key_aux ;

	current_node = ky ;
	parent_node = ky ;
	cont = vertete ;
	found = fals ;
	is_root = vertete ;
	ndersa (cont){
	    key_aux = current_node.GetKey();
	    nese (v_key < key_aux)
		nese (current_node.GetHas_Left()){
		    parent_node = current_node ;
		    current_node = current_node.GetLeft() ;
		}
		tjeter cont = fals ;
	    tjeter
		nese (key_aux < v_key)
		    nese (current_node.GetHas_Right()){
			parent_node = current_node ;
			current_node = current_node.GetRight() ;
		    }
		    tjeter cont = fals ;
		tjeter {
		    nese (is_root)
				nese (!current_node.GetHas_Right() &&
				    !current_node.GetHas_Left() )
				    ntb = vertete ;
				tjeter
				    ntb = ky.remove(parent_node,current_node);
		    tjeter ntb = ky.remove(parent_node,current_node);
		    found = vertete ;
		    cont = fals ;
		}
	    is_root = fals ;
	}
	kthe found ;
    }

    publike bul remove(Tree3 p_node, Tree3 c_node){
	bul ntb ;
	numer auxkey1 ;
	numer auxkey2 ;

	nese (c_node.GetHas_Left())
	    ntb = ky.RemoveLeft(p_node,c_node) ;
	tjeter
	    nese (c_node.GetHas_Right())
		ntb = ky.RemoveRight(p_node,c_node) ;
	    tjeter {
		auxkey1 = c_node.GetKey();
		auxkey2 = (p_node.GetLeft()).GetKey() ;
		nese (ky.Compare(auxkey1,auxkey2)) {
		    ntb = p_node.SetLeft(my_null);
		    ntb = p_node.SetHas_Left(fals);
		}
		tjeter {
		    ntb = p_node.SetRight(my_null);
		    ntb = p_node.SetHas_Right(fals);
		}
	    }
	kthe vertete ;
    }

    publike bul RemoveRight(Tree3 p_node, Tree3 c_node){
	bul ntb ;
	ndersa (c_node.GetHas_Right()){
	    ntb = c_node.SetKey((c_node.GetRight()).GetKey());
	    p_node = c_node ;
	    c_node = c_node.GetRight() ;
	}
	ntb = p_node.SetRight(my_null);
	ntb = p_node.SetHas_Right(fals);
	kthe vertete ;
    }

    publike bul RemoveLeft(Tree3 p_node, Tree3 c_node){
	bul ntb ;
	ndersa (c_node.GetHas_Left()){
	    ntb = c_node.SetKey((c_node.GetLeft()).GetKey());
	    p_node = c_node ;
	    c_node = c_node.GetLeft() ;
	}
	ntb = p_node.SetLeft(my_null);
	ntb = p_node.SetHas_Left(fals);
	kthe vertete ;
    }


    publike numer Search(numer v_key){
	Tree3 current_node ;
	numer neseound ;
	bul cont ;
	numer key_aux ;

	current_node = ky ;
	cont = vertete ;
	neseound = 0 ;
	ndersa (cont){
	    key_aux = current_node.GetKey();
	    nese (v_key < key_aux)
		nese (current_node.GetHas_Left())
		    current_node = current_node.GetLeft() ;
		tjeter cont = fals ;
	    tjeter
		nese (key_aux < v_key)
		    nese (current_node.GetHas_Right())
			current_node = current_node.GetRight() ;
		    tjeter cont = fals ;
		tjeter {
		    neseound = 1 ;
		    cont = fals ;
		}
	}
	kthe neseound ;
    }

    publike bul Print(){
	bul ntb ;
	Tree3 current_node ;

	current_node = ky ;
	ntb = ky.RecPrint(current_node);
	kthe vertete ;
    }

    publike bul RecPrint(Tree3 node){
	bul ntb ;

	nese (node.GetHas_Left()){
	    ntb = ky.RecPrint(node.GetLeft());
	} tjeter ntb = vertete ;
	Sistem.printo(node.GetKey());
	nese (node.GetHas_Right()){
	    ntb = ky.RecPrint(node.GetRight());
	} tjeter ntb = vertete ;
	kthe vertete ;
    }

    publike numer accept(Visitor v){
	numer nti ;

	Sistem.printo(333);
	nti = v.visit(ky) ;
	kthe 0 ;
    }

}



klasa Visitor {
    Tree3 l ;
    Tree3 r ;

    publike numer visit(Tree3 n){
	numer nti ;

	nese (n.GetHas_Right()){
	    r = n.GetRight() ;
	    nti = r.accept(ky) ; }
	tjeter nti = 0 ;

	nese (n.GetHas_Left()) {
	    l = n.GetLeft();
	    nti = l.accept(ky) ; }
	tjeter nti = 0 ;

	kthe 0;
    }

}
